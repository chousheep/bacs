# Define formulas for full and reduced models
cars_full <- mpg ~ cylinders + displacement + horsepower + weight + acceleration + model_year + factor(origin)
cars_reduced <- mpg ~ weight + acceleration + model_year + factor(origin)
# Fit the full model using linear regression
lm_full <- lm(cars_full, data = cars)
# Load the data and remove missing values
cars <- read.table("auto-data.txt", header=FALSE, na.strings = "?")
names(cars) <- c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration",
"model_year", "origin", "car_name")
cars$car_name <- NULL
cars <- na.omit(cars)
# IMPORTANT: Shuffle the rows of data in advance for this project!
set.seed(1029384858) # use your own seed, or use this one to compare to next class notes
cars <- cars[sample(1:nrow(cars)),]
# DV and IV of formulas we are interested in
cars_full <- mpg ~ cylinders + displacement + horsepower + weight + acceleration +
model_year + factor(origin)
cars_reduced <- mpg ~ weight + acceleration + model_year + factor(origin)
cars_full_poly2 <- mpg ~ poly(cylinders, 2) + poly(displacement, 2) + poly(horsepower, 2) + poly(weight, 2) + poly(acceleration, 2) + model_year + factor(origin)
cars_reduced_poly2 <- mpg ~ poly(weight, 2) + poly(acceleration,2) + model_year + factor(origin)
cars_reduced_poly6 <- mpg ~ poly(weight, 6) + poly(acceleration,6) + model_year + factor(origin)
library(rpart) # for regression trees
lm_full <- lm(formula = cars_full, data=cars)
lm_reduced <- lm(formula = cars_reduced, data=cars)
lm_poly2_full <- lm(formula = cars_full_poly2, data=cars)
lm_poly2_reduced <- lm(formula = cars_reduced_poly2, data=cars)
lm_poly6_reduced <- lm(formula = cars_reduced_poly6, data=cars)
rt_full <- rpart(formula = cars_full, data=cars)
rt_reduced <- rpart(formula = cars_reduced, data=cars)
mse_in <- function(model){
mean(residuals(model)^2)
# mean((cars$mpg - fitted(model))^2)
}
mse_lm_full <- mse_in(lm_full)
mse_lm_reduced <- mse_in(lm_reduced)
mse_lm_poly2_full <- mse_in(lm_poly2_full)
mse_lm_poly2_reduced <- mse_in(lm_poly2_reduced)
mse_lm_poly6_reduced <- mse_in(lm_poly6_reduced)
mse_rt_full <- mse_in(rt_full)
mse_rt_reduced <- mse_in(rt_reduced)
cat("mse_lm_full : ", mse_lm_full, "\n")
cat("mse_lm_reduced : ", mse_lm_reduced, "\n")
cat("mse_lm_poly2_full : ", mse_lm_poly2_full, "\n")
cat("mse_lm_poly2_reduced : ", mse_lm_poly2_reduced, "\n")
cat("mse_lm_poly6_reduced : ", mse_lm_poly6_reduced, "\n")
cat("mse_rt_full : ", mse_rt_full, "\n")
cat("mse_rt_reduced : ", mse_rt_reduced, "\n")
set.seed(111555777)
# Split the data into 70:30 for training:test
train_indices <- sample(1:nrow(cars), size = 0.70*nrow(cars))
train_set <- cars[train_indices,]
test_set <- cars[-train_indices,]
# Retrain the lm_reduced model on just the training dataset
trained_model <- lm(formula = cars_reduced, data = train_set)
# Show the coefficients of the trained model
summary(trained_model)$coefficients
# Function to calculate in-sample MSE
mse_in <- function(model) {
mean(residuals(model)^2)
}
# Use the trained_model model to predict the mpg of the test dataset
mpg_predicted <- predict(trained_model, newdata = test_set)
# Calculate the in-sample MSE (MSEin) of the trained model
cat("MSEin : ", mse_in(trained_model), "\n")
# Calculate the out-of-sample MSE (MSEout) of the test dataset
mpg_actual <- test_set$mpg
pred_err <- mpg_actual - mpg_predicted
cat("MSEout : ", mean((mpg_predicted - mpg_actual)^2), "\n")
data.frame(
"actual mpg" = mpg_actual,
"predicted mpg" = mpg_predicted,
"predictive error" = pred_err
) |> head()
# Function to calculate prediction errors for fold i
fold_i_pe <- function(i, k, dataset, model_function, formula) {
# Split the data into k folds
folds <- cut(seq(1, nrow(dataset)), breaks = k, labels = FALSE)
# Identify test and training indices for the ith fold
test_indices <- which(folds == i, arr.ind = TRUE)
test_set <- dataset[test_indices, ]
train_set <- dataset[-test_indices, ]
# Train the model on the training set
trained_model <- model_function(formula, data = train_set)
# Predict on the test set
predictions <- predict(trained_model, newdata = test_set)
# Calculate prediction errors
actuals <- test_set$mpg
prediction_errors <- actuals - predictions
return(prediction_errors)
}
# Function to calculate mean squared error across all folds
k_fold_mse <- function(dataset, k = 10, model_function, formula) {
# Calculate prediction errors for each fold
fold_pred_errors <- sapply(1:k, function(i) {
fold_i_pe(i, k, dataset, model_function, formula)
})
# Combine all prediction errors into a single vector
pred_errors <- unlist(fold_pred_errors)
# Calculate and return the mean squared error
mse <- mean(pred_errors^2)
return(mse)
}
k_fold_mse(dataset=cars, k=10,lm, formula=cars_full)
k_fold_mse(dataset=cars, k=10,lm, formula=cars_reduced)
k_fold_mse(dataset=cars, k=10,lm, formula=cars_full_poly2)
k_fold_mse(dataset=cars, k=10,lm, formula=cars_reduced_poly2)
k_fold_mse(dataset=cars, k=10,lm, formula=cars_reduced_poly6)
k_fold_mse(dataset=cars, k=10,rpart, formula=cars_reduced_poly2)
k_fold_mse(dataset=cars, k=10,rpart, formula=cars_reduced_poly6)
set.seed(111555777)
n_repeats <- 5
mse_out_repeats <- replicate(n_repeats, {
k_fold_mse(cars, k = 10, model_function = lm, formula = cars_full)
})
# Display the results
data.frame(Repetition = 1:n_repeats, MSEout = mse_out_repeats)
k_fold_mse(dataset=cars, k=392,lm, formula=cars_full)
k_fold_mse(dataset=cars, k=392,lm, formula=cars_reduced)
k_fold_mse(dataset=cars, k=392,lm, formula=cars_full_poly2)
k_fold_mse(dataset=cars, k=392,lm, formula=cars_reduced_poly2)
k_fold_mse(dataset=cars, k=392,lm, formula=cars_reduced_poly6)
k_fold_mse(dataset=cars, k=392,rpart, formula=cars_reduced_poly2)
k_fold_mse(dataset=cars, k=392,rpart, formula=cars_reduced_poly6)
set.seed(111555777)
n_repeats <- 5
mse_out_repeats <- replicate(n_repeats, {
k_fold_mse(cars, k = 10, model_function = lm, formula = cars_full)
})
# Display the results
data.frame(Repetition = 1:n_repeats, MSEout = mse_out_repeats)
# Define formulas for full and reduced models
cars_full <- mpg ~ cylinders + displacement + horsepower + weight + acceleration + model_year + factor(origin)
cars_reduced <- mpg ~ weight + acceleration + model_year + factor(origin)
# Fit the full model using linear regression
lm_full <- lm(cars_full, data = cars)
lm_reduced <- lm(cars_reduced, data = cars)
# Function to calculate in-sample MSE
mse_in <- function(model) {
mean(residuals(model)^2)
}
# Calculate in-sample MSE for full and reduced models
mse_lm_full_in <- mse_in(lm_full)
mse_lm_reduced_in <- mse_in(lm_reduced)
# Function to calculate prediction error using k-fold CV
k_fold_mse <- function(dataset, k, model_function, formula) {
fold_pred_errors <- sapply(1:k, function(i) {
fold_i_pe(i, k, dataset, model_function, formula)
})
pred_errors <- unlist(fold_pred_errors)
mse <- mean(pred_errors^2)
return(mse)
}
fold_i_pe <- function(i, k, dataset, model_function, formula) {
folds <- cut(seq(1, nrow(dataset)), breaks = k, labels = FALSE)
test_indices <- which(folds == i, arr.ind = TRUE)
test_set <- dataset[test_indices, ]
train_set <- dataset[-test_indices, ]
trained_model <- model_function(formula, data = train_set)
predictions <- predict(trained_model, newdata = test_set)
actuals <- test_set$mpg
prediction_errors <- actuals - predictions
return(prediction_errors)
}
# Set seed for reproducibility
set.seed(123)
# Calculate out-of-sample MSE for full and reduced models
mse_lm_full_out <- k_fold_mse(cars, 392, lm, cars_full)
mse_lm_reduced_out <- k_fold_mse(cars, 392, lm, cars_reduced)
# Display results
results <- data.frame(
Model = c("Full Model", "Reduced Model"),
MSEin = c(mse_lm_full_in, mse_lm_reduced_in),
MSEout = c(mse_lm_full_out, mse_lm_reduced_out)
)
print(results)
# Calculate in-sample MSE for full and reduced models
mse_lm_full_in <- mse_in(lm_full)
mse_lm_reduced_in <- mse_in(lm_reduced)
# Set seed for reproducibility
set.seed(111555777)
# Calculate out-of-sample MSE for full and reduced models
mse_lm_full_out <- k_fold_mse(cars, 392, lm, cars_full)
mse_lm_reduced_out <- k_fold_mse(cars, 392, lm, cars_reduced)
# Display results
data.frame(
Model = c("Full Model", "Reduced Model"),
MSEin = c(mse_lm_full_in, mse_lm_reduced_in),
MSEout = c(mse_lm_full_out, mse_lm_reduced_out)
)
# Calculate in-sample MSE for both models
mse_poly2_reduced_in <- mse_in(lm_poly2_reduced)
mse_poly6_reduced_in <- mse_in(lm_poly6_reduced)
# Set seed for reproducibility
set.seed(111555777)
# Calculate out-of-sample MSE for both models using k-fold CV
mse_poly2_reduced_out <- k_fold_mse(cars, 392, lm, cars_reduced_poly2)
mse_poly6_reduced_out <- k_fold_mse(cars, 392, lm, cars_reduced_poly6)
# Display results
data.frame(Model = c("Reduced Quadratic", "Reduced 6th Order Polynomial"),
MSEin = c(mse_poly2_reduced_in, mse_poly6_reduced_in),
MSEout = c(mse_poly2_reduced_out, mse_poly6_reduced_out)
)
k_fold_mse(dataset=cars, k=392,lm, formula=cars_full)
k_fold_mse(dataset=cars, k=392,lm, formula=cars_reduced)
k_fold_mse(dataset=cars, k=392,lm, formula=cars_full_poly2)
k_fold_mse(dataset=cars, k=392,lm, formula=cars_reduced_poly2)
k_fold_mse(dataset=cars, k=392,lm, formula=cars_reduced_poly6)
k_fold_mse(dataset=cars, k=392,rpart, formula=cars_reduced_poly2)
k_fold_mse(dataset=cars, k=392,rpart, formula=cars_reduced_poly6)
data.frame(Model = c("lm_full", "lm_reduced", "lm_full_poly2", "lm_reduced_poly2", "lm_reduced_poly6", "rt_reduced_poly2", "rt_reduced_poly6"),
MSEout = c(mse_full, mse_reduced, mse_full_poly2, mse_reduced_poly2,
mse_reduced_poly6, mse_rpart_reduced_poly2, mse_rpart_reduced_poly6)
)
k_fold_mse(dataset=cars, k=10,lm, formula=cars_full)
k_fold_mse(dataset=cars, k=10,lm, formula=cars_reduced)
k_fold_mse(dataset=cars, k=10,lm, formula=cars_full_poly2)
k_fold_mse(dataset=cars, k=10,lm, formula=cars_reduced_poly2)
k_fold_mse(dataset=cars, k=10,lm, formula=cars_reduced_poly6)
k_fold_mse(dataset=cars, k=10,rpart, formula=cars_reduced_poly2)
k_fold_mse(dataset=cars, k=10,rpart, formula=cars_reduced_poly6)
data.frame(Model = c("lm_full", "lm_reduced", "lm_full_poly2", "lm_reduced_poly2", "lm_reduced_poly6", "rt_reduced_poly2", "rt_reduced_poly6"),
MSEout = c(mse_full, mse_reduced, mse_full_poly2, mse_reduced_poly2,
mse_reduced_poly6, mse_rpart_reduced_poly2, mse_rpart_reduced_poly6)
)
data.frame(Model = c("lm_full", "lm_reduced", "lm_full_poly2", "lm_reduced_poly2", "lm_reduced_poly6", "rt_reduced_poly2", "rt_reduced_poly6"),
MSEout = c(mse_full, mse_reduced, mse_full_poly2, mse_reduced_poly2,
mse_reduced_poly6, mse_rpart_reduced_poly2, mse_rpart_reduced_poly6)
)
mse_full <- k_fold_mse(dataset=cars, k=10,lm, formula=cars_full)
mse_reduced <- k_fold_mse(dataset=cars, k=10,lm, formula=cars_reduced)
mse_full_poly2 <- k_fold_mse(dataset=cars, k=10,lm, formula=cars_full_poly2)
mse_reduced_poly2 <- k_fold_mse(dataset=cars, k=10,lm, formula=cars_reduced_poly2)
mse_reduced_poly6 <- k_fold_mse(dataset=cars, k=10,lm, formula=cars_reduced_poly6)
mse_rpart_reduced_poly2 <- k_fold_mse(dataset=cars, k=10,rpart, formula=cars_reduced_poly2)
mse_rpart_reduced_poly6 <- k_fold_mse(dataset=cars, k=10,rpart, formula=cars_reduced_poly6)
data.frame(Model = c("lm_full", "lm_reduced", "lm_full_poly2", "lm_reduced_poly2", "lm_reduced_poly6", "rt_reduced_poly2", "rt_reduced_poly6"),
MSEout = c(mse_full, mse_reduced, mse_full_poly2, mse_reduced_poly2,
mse_reduced_poly6, mse_rpart_reduced_poly2, mse_rpart_reduced_poly6)
)
mse_full <- k_fold_mse(dataset=cars, k=392,lm, formula=cars_full)
mse_reduced <- k_fold_mse(dataset=cars, k=392,lm, formula=cars_reduced)
mse_full_poly2 <- k_fold_mse(dataset=cars, k=392,lm, formula=cars_full_poly2)
mse_reduced_poly2 <- k_fold_mse(dataset=cars, k=392,lm, formula=cars_reduced_poly2)
mse_reduced_poly6 <- k_fold_mse(dataset=cars, k=392,lm, formula=cars_reduced_poly6)
mse_rpart_reduced_poly2 <- k_fold_mse(dataset=cars, k=392,rpart, formula=cars_reduced_poly2)
mse_rpart_reduced_poly6 <- k_fold_mse(dataset=cars, k=392,rpart, formula=cars_reduced_poly6)
data.frame(Model = c("lm_full", "lm_reduced", "lm_full_poly2", "lm_reduced_poly2", "lm_reduced_poly6", "rt_reduced_poly2", "rt_reduced_poly6"),
MSEout = c(mse_full, mse_reduced, mse_full_poly2, mse_reduced_poly2,
mse_reduced_poly6, mse_rpart_reduced_poly2, mse_rpart_reduced_poly6)
)
# Load the data and remove missing values
cars <- read.table("auto-data.txt", header=FALSE, na.strings = "?")
names(cars) <- c("mpg", "cylinders", "displacement", "horsepower", "weight", "acceleration",
"model_year", "origin", "car_name")
cars$car_name <- NULL
cars <- na.omit(cars)
# IMPORTANT: Shuffle the rows of data in advance for this project!
set.seed(111555777) # use your own seed, or use this one to compare to next class notes
cars <- cars[sample(1:nrow(cars)),]
# DV and IV of formulas we are interested in
cars_full <- mpg ~ cylinders + displacement + horsepower + weight + acceleration +
model_year + factor(origin)
cars_reduced <- mpg ~ weight + acceleration + model_year + factor(origin)
cars_full_poly2 <- mpg ~ poly(cylinders, 2) + poly(displacement, 2) + poly(horsepower, 2) + poly(weight, 2) + poly(acceleration, 2) + model_year + factor(origin)
cars_reduced_poly2 <- mpg ~ poly(weight, 2) + poly(acceleration,2) + model_year + factor(origin)
cars_reduced_poly6 <- mpg ~ poly(weight, 6) + poly(acceleration,6) + model_year + factor(origin)
library(rpart) # for regression trees
lm_full <- lm(formula = cars_full, data=cars)
lm_reduced <- lm(formula = cars_reduced, data=cars)
lm_poly2_full <- lm(formula = cars_full_poly2, data=cars)
lm_poly2_reduced <- lm(formula = cars_reduced_poly2, data=cars)
lm_poly6_reduced <- lm(formula = cars_reduced_poly6, data=cars)
rt_full <- rpart(formula = cars_full, data=cars)
rt_reduced <- rpart(formula = cars_reduced, data=cars)
mse_in <- function(model){
mean(residuals(model)^2)
# mean((cars$mpg - fitted(model))^2)
}
mse_lm_full <- mse_in(lm_full)
mse_lm_reduced <- mse_in(lm_reduced)
mse_lm_poly2_full <- mse_in(lm_poly2_full)
mse_lm_poly2_reduced <- mse_in(lm_poly2_reduced)
mse_lm_poly6_reduced <- mse_in(lm_poly6_reduced)
mse_rt_full <- mse_in(rt_full)
mse_rt_reduced <- mse_in(rt_reduced)
cat("mse_lm_full : ", mse_lm_full, "\n")
cat("mse_lm_reduced : ", mse_lm_reduced, "\n")
cat("mse_lm_poly2_full : ", mse_lm_poly2_full, "\n")
cat("mse_lm_poly2_reduced : ", mse_lm_poly2_reduced, "\n")
cat("mse_lm_poly6_reduced : ", mse_lm_poly6_reduced, "\n")
cat("mse_rt_full : ", mse_rt_full, "\n")
cat("mse_rt_reduced : ", mse_rt_reduced, "\n")
set.seed(111555777)
# Split the data into 70:30 for training:test
train_indices <- sample(1:nrow(cars), size = 0.70*nrow(cars))
train_set <- cars[train_indices,]
test_set <- cars[-train_indices,]
# Retrain the lm_reduced model on just the training dataset
trained_model <- lm(formula = cars_reduced, data = train_set)
# Show the coefficients of the trained model
summary(trained_model)$coefficients
# Function to calculate in-sample MSE
mse_in <- function(model) {
mean(residuals(model)^2)
}
# Use the trained_model model to predict the mpg of the test dataset
mpg_predicted <- predict(trained_model, newdata = test_set)
# Calculate the in-sample MSE (MSEin) of the trained model
cat("MSEin : ", mse_in(trained_model), "\n")
# Calculate the out-of-sample MSE (MSEout) of the test dataset
mpg_actual <- test_set$mpg
pred_err <- mpg_actual - mpg_predicted
cat("MSEout : ", mean((mpg_predicted - mpg_actual)^2), "\n")
data.frame(
"actual mpg" = mpg_actual,
"predicted mpg" = mpg_predicted,
"predictive error" = pred_err
) |> head()
# Function to calculate prediction errors for fold i
fold_i_pe <- function(i, k, dataset, model_function, formula) {
# Split the data into k folds
folds <- cut(seq(1, nrow(dataset)), breaks = k, labels = FALSE)
# Identify test and training indices for the ith fold
test_indices <- which(folds == i, arr.ind = TRUE)
test_set <- dataset[test_indices, ]
train_set <- dataset[-test_indices, ]
# Train the model on the training set
trained_model <- model_function(formula, data = train_set)
# Predict on the test set
predictions <- predict(trained_model, newdata = test_set)
# Calculate prediction errors
actuals <- test_set$mpg
prediction_errors <- actuals - predictions
return(prediction_errors)
}
# Function to calculate mean squared error across all folds
k_fold_mse <- function(dataset, k = 10, model_function, formula) {
# Calculate prediction errors for each fold
fold_pred_errors <- sapply(1:k, function(i) {
fold_i_pe(i, k, dataset, model_function, formula)
})
# Combine all prediction errors into a single vector
pred_errors <- unlist(fold_pred_errors)
# Calculate and return the mean squared error
mse <- mean(pred_errors^2)
return(mse)
}
mse_full <- k_fold_mse(dataset=cars, k=10,lm, formula=cars_full)
mse_reduced <- k_fold_mse(dataset=cars, k=10,lm, formula=cars_reduced)
mse_full_poly2 <- k_fold_mse(dataset=cars, k=10,lm, formula=cars_full_poly2)
mse_reduced_poly2 <- k_fold_mse(dataset=cars, k=10,lm, formula=cars_reduced_poly2)
mse_reduced_poly6 <- k_fold_mse(dataset=cars, k=10,lm, formula=cars_reduced_poly6)
mse_rpart_reduced_poly2 <- k_fold_mse(dataset=cars, k=10,rpart, formula=cars_reduced_poly2)
mse_rpart_reduced_poly6 <- k_fold_mse(dataset=cars, k=10,rpart, formula=cars_reduced_poly6)
data.frame(Model = c("lm_full", "lm_reduced", "lm_full_poly2", "lm_reduced_poly2", "lm_reduced_poly6", "rt_reduced_poly2", "rt_reduced_poly6"),
MSEout = c(mse_full, mse_reduced, mse_full_poly2, mse_reduced_poly2,
mse_reduced_poly6, mse_rpart_reduced_poly2, mse_rpart_reduced_poly6)
)
set.seed(111555777)
n_repeats <- 5
mse_out_repeats <- replicate(n_repeats, {
k_fold_mse(cars, k = 10, model_function = lm, formula = cars_full)
})
# Display the results
data.frame(Repetition = 1:n_repeats, MSEout = mse_out_repeats)
mse_full <- k_fold_mse(dataset=cars, k=392,lm, formula=cars_full)
mse_reduced <- k_fold_mse(dataset=cars, k=392,lm, formula=cars_reduced)
mse_full_poly2 <- k_fold_mse(dataset=cars, k=392,lm, formula=cars_full_poly2)
mse_reduced_poly2 <- k_fold_mse(dataset=cars, k=392,lm, formula=cars_reduced_poly2)
mse_reduced_poly6 <- k_fold_mse(dataset=cars, k=392,lm, formula=cars_reduced_poly6)
mse_rpart_reduced_poly2 <- k_fold_mse(dataset=cars, k=392,rpart, formula=cars_reduced_poly2)
mse_rpart_reduced_poly6 <- k_fold_mse(dataset=cars, k=392,rpart, formula=cars_reduced_poly6)
data.frame(Model = c("lm_full", "lm_reduced", "lm_full_poly2", "lm_reduced_poly2", "lm_reduced_poly6", "rt_reduced_poly2", "rt_reduced_poly6"),
MSEout = c(mse_full, mse_reduced, mse_full_poly2, mse_reduced_poly2,
mse_reduced_poly6, mse_rpart_reduced_poly2, mse_rpart_reduced_poly6)
)
set.seed(111555777)
n_repeats <- 5
mse_out_repeats <- replicate(n_repeats, {
k_fold_mse(cars, k = 10, model_function = lm, formula = cars_full)
})
# Display the results
data.frame(Repetition = 1:n_repeats, MSEout = mse_out_repeats)
# Calculate in-sample MSE for full and reduced models
mse_lm_full_in <- mse_in(lm_full)
mse_lm_reduced_in <- mse_in(lm_reduced)
# Set seed for reproducibility
set.seed(111555777)
# Calculate out-of-sample MSE for full and reduced models
mse_lm_full_out <- k_fold_mse(cars, 392, lm, cars_full)
mse_lm_reduced_out <- k_fold_mse(cars, 392, lm, cars_reduced)
# Display results
data.frame(Model = c("Full Model", "Reduced Model"),
MSEin = c(mse_lm_full_in, mse_lm_reduced_in),
MSEout = c(mse_lm_full_out, mse_lm_reduced_out)
)
# Calculate in-sample MSE for both models
mse_poly2_reduced_in <- mse_in(lm_poly2_reduced)
mse_poly6_reduced_in <- mse_in(lm_poly6_reduced)
# Set seed for reproducibility
set.seed(111555777)
# Calculate out-of-sample MSE for both models using k-fold CV
mse_poly2_reduced_out <- k_fold_mse(cars, 392, lm, cars_reduced_poly2)
mse_poly6_reduced_out <- k_fold_mse(cars, 392, lm, cars_reduced_poly6)
# Display results
data.frame(Model = c("Reduced Quadratic", "Reduced 6th Order Polynomial"),
MSEin = c(mse_poly2_reduced_in, mse_poly6_reduced_in),
MSEout = c(mse_poly2_reduced_out, mse_poly6_reduced_out)
)
