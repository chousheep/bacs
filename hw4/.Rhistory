knitr::opts_chunk$set(echo = TRUE)
install.packages("remotes")
remotes::install_github("soumyaray/compstatslib")
#library(compstatslib)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("soumyaray/compstatslib")
library(compstatslib)
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
#install.packages("remotes")
#remotes::install_github("soumyaray/compstatslib")
library(compstatslib)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("verizon.csv")
sample_vrt <- data$Time
plot(density(sample_vrt),lwd =2, col = "blue", main = "Distribution of Verision Repair Times")
abline(v = mean(sample_vrt))
vrt_size <- length(sample_vrt)
vrt_mean <- mean(sample_vrt)
vrt_sd <- sd(sample_vrt)
vrt_se <- vrt_sd/sqrt(vrt_size)
vrt_ci99 <- vrt_mean + c(-2.58*vrt_se, 2.58*vrt_se) # 99% CI
cat("Sample Mean:", vrt_mean, "\n")
cat("Standard Error:", vrt_se, "\n")
cat("99% Confidence Interval:",
"\n","Lower Bound =", vrt_ci99[1], "\n",
"Upper Bound =", vrt_ci99[2], "\n")
hyp_mean <- 7.6
t <- (vrt_mean - hyp_mean)/vrt_se
df <- vrt_size -1
p <- 1- pt(t,df)
cat("p-value:", 2*p, "\n")
t.test(x = sample_vrt, mu = 7.6, conf.level = 0.99)
num_boot = 2000
sample_statistic <- function(stat_function,sample0){
resample <- sample(sample0,length(sample0),replace = TRUE)
stat_function(resample)
}
set.seed(123123)
boot_sample_means <- replicate(num_boot,sample_statistic(mean,sample_vrt))
#plot(density(boot_sample_means),lwd = 2, main = "Bootstrapped Sample Means")
ci99_boot_means <- quantile(boot_sample_means, probs = c(0.005, 0.995))
ci99_boot_means
bootstrapping_mean_diff <- function(sample0, hypothesized_mean){
resample <- sample(sample0,length(sample0),replace = TRUE)
return(mean(resample) - hypothesized_mean)
}
set.seed(123123)
num_boot <- 2000
boot_mean_diffs <- replicate(num_boot,bootstrapping_mean_diff(sample_vrt,hyp_mean))
#plot(density(boot_mean_diffs),lwd = 2, main = "Bootstrapped Mean Diffs")
ci99_boot_mean_diffs <- quantile(boot_mean_diffs, probs = c(0.005, 0.995))
ci99_boot_mean_diffs
bootstrapping_t_stat <- function(sample0, hypothesized_mean){
resample <- sample(sample0,length(sample0),replace = TRUE)
diff <- mean(resample) - hypothesized_mean
se <- sd(resample)/sqrt(length(resample))
return(mean(resample) - hypothesized_mean)
}
set.seed(123123)
num_boot <- 2000
boot_t_stats <- replicate(num_boot,bootstrapping_t_stat(sample_vrt,hyp_mean))
#plot(density(boot_t_stats),lwd = 2, main = "Bootstrapped t-stats")
ci99_boot_t_stats <- quantile(boot_t_stats, probs = c(0.005, 0.995))
ci99_boot_t_stats
plot(density(boot_sample_means),lwd = 2, main = "Bootstrapped Sample Means",col = "blue")
abline(v = quantile(boot_sample_means, probs = c(0.005, 0.995), names = FALSE))
plot(density(boot_mean_diffs),lwd = 2, main = "Bootstrapped Mean Diffs",col = "blue")
abline(v = quantile(boot_mean_diffs, probs = c(0.005, 0.995), names = FALSE))
plot(density(boot_t_stats),lwd = 2, main = "Bootstrapped t_stats",col = "blue")
abline(v = quantile(boot_t_stats, probs = c(0.005, 0.995), names = FALSE))
boot_sample_medians <- replicate(num_boot,sample_statistic(median,sample_vrt))
#plot(density(boot_sample_medians),lwd = 2, main = "Bootstrapped Sample Medians")
ci99_boot_medians <- quantile(boot_sample_medians, probs = 0.99)
ci99_boot_medians
bootstrapping_median_diff <- function(sample0, hypothesized_median){
resample <- sample(sample0,length(sample0),replace = TRUE)
return(median(resample) - hypothesized_median)
}
set.seed(123123)
hyp_median <- 3.5
num_boot <- 2000
boot_median_diffs <- replicate(num_boot,bootstrapping_median_diff(sample_vrt,hyp_median))
#plot(density(boot_median_diffs),lwd = 2, main = "Bootstrapped Median Diffs")
ci99_boot_median_diffs <- quantile(boot_median_diffs, probs = 0.99)
ci99_boot_median_diffs
plot(density(boot_sample_medians),lwd = 2, main = "Bootstrapped Sample Medians",col = "red")
abline(v = quantile(boot_sample_medians, probs = 0.99, names = FALSE))
plot(density(boot_median_diffs),lwd = 2, main = "Bootstrapped Median Diffs",col = "red")
abline(v = quantile(boot_median_diffs, probs = 0.99, names = FALSE))
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
interactive_t_test()
::interactive
swirk()
swirl()
library(swirl())
swirl()
1
1
1
1
1
::interacitve()
library(interactive_t_test)
quit()
# Read in the dataset
data <- read.csv("verizon.csv")
sample_vrt <- data$Time
# Get a glimpse into the distribution
plot(density(sample_vrt),lwd =2, col = "blue", main = "Distribution of Verision Repair Times")
abline(v = mean(sample_vrt))
vrt_size <- length(sample_vrt)
vrt_mean <- mean(sample_vrt)
vrt_sd <- sd(sample_vrt)
vrt_se <- vrt_sd/sqrt(vrt_size)
vrt_ci99 <- vrt_mean + c(-2.58*vrt_se, 2.58*vrt_se) # 99% CI
cat("Sample Mean:", vrt_mean, "\n")
cat("Standard Error:", vrt_se, "\n")
cat("99% Confidence Interval:",
"\n","Lower Bound =", vrt_ci99[1], "\n",
"Upper Bound =", vrt_ci99[2], "\n")
hyp_mean <- 7.6
t <- (vrt_mean - hyp_mean)/vrt_se
df <- vrt_size -1
p <- 1- pt(t,df)
cat("t-statistic:", t, "\n")
cat("p-value:", p, "\n")
# Setting up function
sample_statistic <- function(stat_function,sample0){
resample <- sample(sample0,length(sample0),replace = TRUE)
stat_function(resample)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
num_boot <- 2000
boot_sample_means <- replicate(num_boot,sample_statistic(mean,sample_vrt))
# Print estimated 99% CI of sampling means
ci99_boot_means <- quantile(boot_sample_means, probs = c(0.005, 0.995))
ci99_boot_means
# Setting up function
bootstrapping_mean_diff <- function(sample0, hypothesized_mean){
resample <- sample(sample0,length(sample0),replace = TRUE)
return(mean(resample) - hypothesized_mean)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
num_boot <- 2000
boot_mean_diffs <- replicate(num_boot,bootstrapping_mean_diff(sample_vrt,hyp_mean))
# Print estimated 99% CI of mean differences
ci99_boot_mean_diffs <- quantile(boot_mean_diffs, probs = c(0.005, 0.995))
ci99_boot_mean_diffs
# Build the function for calculating t-stat
bootstrapping_t_stat <- function(sample0, hypothesized_mean){
resample <- sample(sample0,length(sample0),replace = TRUE)
diff <- mean(resample) - hypothesized_mean
se <- sd(resample)/sqrt(length(resample))
return(mean(resample) - hypothesized_mean)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
num_boot <- 2000
boot_t_stats <- replicate(num_boot,bootstrapping_t_stat(sample_vrt,hyp_mean))
# Print estimated 99% CI of t_stats
ci99_boot_t_stats <- quantile(boot_t_stats, probs = c(0.005, 0.995))
ci99_boot_t_stats
# Display three plots at once
par(mfrow = c(3,1))
# bootstrapped sampling means
plot(density(boot_sample_means),lwd = 2, main = "Bootstrapped Sample Means",col = "blue")
abline(v = quantile(boot_sample_means, probs = c(0.005, 0.995), names = FALSE))
# bootstrapped mean differences
plot(density(boot_mean_diffs),lwd = 2, main = "Bootstrapped Mean Diffs",col = "blue")
abline(v = quantile(boot_mean_diffs, probs = c(0.005, 0.995), names = FALSE))
# bootstrapped t-statistics
plot(density(boot_t_stats),lwd = 2, main = "Bootstrapped t_stats",col = "blue")
abline(v = quantile(boot_t_stats, probs = c(0.005, 0.995), names = FALSE))
# Get the function ready
sample_statistic <- function(stat_function,sample0){
resample <- sample(sample0,length(sample0),replace = TRUE)
stat_function(resample)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
boot_sample_medians <- replicate(num_boot,sample_statistic(median,sample_vrt))
# Print estimated 99% CI of sampling medians
ci99_boot_medians <- quantile(boot_sample_medians, probs = 0.99)
ci99_boot_medians
# Setting up function
bootstrapping_median_diff <- function(sample0, hypothesized_median){
resample <- sample(sample0,length(sample0),replace = TRUE)
return(median(resample) - hypothesized_median)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
hyp_median <- 3.5
num_boot <- 2000
boot_median_diffs <- replicate(num_boot,bootstrapping_median_diff(sample_vrt,hyp_median))
# Print estimated 99% CI of sampling median differences
ci99_boot_median_diffs <- quantile(boot_median_diffs, probs = 0.99)
ci99_boot_median_diffs
# Display two plots at once
par(mfrow = c(1,2))
# bootstrapped sampling medians
plot(density(boot_sample_medians),lwd = 2, main = "Boot Sample Medians",col = "red")
abline(v = quantile(boot_sample_medians, probs = 0.99, names = FALSE))
# bootstrapped median differences
plot(density(boot_median_diffs),lwd = 2, main = "Boot Median Diffs",col = "red")
abline(v = quantile(boot_median_diffs, probs = 0.99, names = FALSE))
# install.packages("remotes")
# remotes::install_github("soumyaray/compstatslib")
# library(compstatslib)
# compstatslib::interactive_t_test()
# Read in the dataset
data <- read.csv("verizon.csv")
sample_vrt <- data$Time
# Get a glimpse into the distribution
plot(density(sample_vrt),lwd =2, col = "blue", main = "Verision Repair Times")
abline(v = mean(sample_vrt))
vrt_size <- length(sample_vrt)
vrt_mean <- mean(sample_vrt)
vrt_sd <- sd(sample_vrt)
vrt_se <- vrt_sd/sqrt(vrt_size)
vrt_ci99 <- vrt_mean + c(-2.58*vrt_se, 2.58*vrt_se) # 99% CI
cat("Sample Mean:", vrt_mean, "\n")
#cat("Standard Error:", vrt_se, "\n")
cat("99% Confidence Interval:",
"\n","Lower Bound =", vrt_ci99[1], "\n",
"Upper Bound =", vrt_ci99[2], "\n")
# Setting up function
sample_statistic <- function(stat_function,sample0){
resample <- sample(sample0,length(sample0),replace = TRUE)
stat_function(resample)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
num_boot <- 2000
boot_sample_means <- replicate(num_boot,sample_statistic(mean,sample_vrt))
# Print estimated 99% CI of sampling means
ci99_boot_means <- quantile(boot_sample_means, probs = c(0.005, 0.995))
cat("99CI of sample means","\n",ci99_boot_means)
#ci99_boot_means
# Setting up function
sample_statistic <- function(stat_function,sample0){
resample <- sample(sample0,length(sample0),replace = TRUE)
stat_function(resample)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
num_boot <- 2000
boot_sample_means <- replicate(num_boot,sample_statistic(mean,sample_vrt))
# Print estimated 99% CI of sampling means
ci99_boot_means <- quantile(boot_sample_means, probs = c(0.005, 0.995))
cat("99% CI of sample means","\n",ci99_boot_means)
#ci99_boot_means
# Setting up function
sample_statistic <- function(stat_function,sample0){
resample <- sample(sample0,length(sample0),replace = TRUE)
stat_function(resample)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
num_boot <- 2000
boot_sample_means <- replicate(num_boot,sample_statistic(mean,sample_vrt))
# Print estimated 99% CI of sampling means
ci99_boot_means <- quantile(boot_sample_means, probs = c(0.005, 0.995))
cat("99% CI of sample means","\n")
ci99_boot_means
# Setting up function
bootstrapping_mean_diff <- function(sample0, hypothesized_mean){
resample <- sample(sample0,length(sample0),replace = TRUE)
return(mean(resample) - hypothesized_mean)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
num_boot <- 2000
boot_mean_diffs <- replicate(num_boot,bootstrapping_mean_diff(sample_vrt,hyp_mean))
# Print estimated 99% CI of mean differences
ci99_boot_mean_diffs <- quantile(boot_mean_diffs, probs = c(0.005, 0.995))
cat("99% CI of mean differences","\n")
ci99_boot_mean_diffs
# Build the function for calculating t-stat
bootstrapping_t_stat <- function(sample0, hypothesized_mean){
resample <- sample(sample0,length(sample0),replace = TRUE)
diff <- mean(resample) - hypothesized_mean
se <- sd(resample)/sqrt(length(resample))
return(mean(resample) - hypothesized_mean)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
num_boot <- 2000
boot_t_stats <- replicate(num_boot,bootstrapping_t_stat(sample_vrt,hyp_mean))
# Print estimated 99% CI of t_stats
ci99_boot_t_stats <- quantile(boot_t_stats, probs = c(0.005, 0.995))
cat("99% CI of tstats","\n")
ci99_boot_t_stats
# Get the function ready
sample_statistic <- function(stat_function,sample0){
resample <- sample(sample0,length(sample0),replace = TRUE)
stat_function(resample)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
boot_sample_medians <- replicate(num_boot,sample_statistic(median,sample_vrt))
# Print estimated 99% CI of sampling medians
ci99_boot_medians <- quantile(boot_sample_medians, probs = 0.99)
cat("99% CI of sampling medians","\n")
ci99_boot_medians
# Setting up function
bootstrapping_median_diff <- function(sample0, hypothesized_median){
resample <- sample(sample0,length(sample0),replace = TRUE)
return(median(resample) - hypothesized_median)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
hyp_median <- 3.5
num_boot <- 2000
boot_median_diffs <- replicate(num_boot,bootstrapping_median_diff(sample_vrt,hyp_median))
# Print estimated 99% CI of sampling median differences
ci99_boot_median_diffs <- quantile(boot_median_diffs, probs = 0.99)
cat("99% CI of median differences","\n")
ci99_boot_median_diffs
library(compstatslib)
compstatslib::interactive_t_test()
# Build the function for calculating t-stat
bootstrapping_t_stat <- function(sample0, hypothesized_mean){
resample <- sample(sample0,length(sample0),replace = TRUE)
diff <- mean(resample) - hypothesized_mean
se <- sd(resample)/sqrt(length(resample))
return((mean(resample) - hypothesized_mean)/se)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
num_boot <- 2000
boot_t_stats <- replicate(num_boot,bootstrapping_t_stat(sample_vrt,hyp_mean))
# Print estimated 99% CI of t_stats
ci99_boot_t_stats <- quantile(boot_t_stats, probs = c(0.005, 0.995))
cat("99% CI of tstats","\n")
ci99_boot_t_stats
# Build the function for calculating t-stat
bootstrapping_t_stat <- function(sample0, hypothesized_mean){
resample <- sample(sample0,length(sample0),replace = TRUE)
diff <- mean(resample) - hypothesized_mean
se <- sd(resample)/sqrt(length(resample))
return((mean(resample) - hypothesized_mean)/se)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
num_boot <- 2000
boot_t_stats <- replicate(num_boot,bootstrapping_t_stat(sample_vrt,hyp_mean))
# Print estimated 99% CI of t_stats
ci99_boot_t_stats <- quantile(boot_t_stats, probs = c(0.005, 0.995))
cat("99% CI of tstats","\n")
ci99_boot_t_stats
# Build the function for calculating t-stat
bootstrapping_t_stat <- function(sample0, hypothesized_mean){
resample <- sample(sample0,length(sample0),replace = TRUE)
diff <- mean(resample) - hypothesized_mean
se <- sd(resample)/sqrt(length(resample))
return(diff/se)
}
# Setting seed before bootstrapping
set.seed(123123)
# Do bootstrapping 2000 times
num_boot <- 2000
boot_t_stats <- replicate(num_boot,bootstrapping_t_stat(sample_vrt,hyp_mean))
# Print estimated 99% CI of t_stats
ci99_boot_t_stats <- quantile(boot_t_stats, probs = c(0.005, 0.995))
cat("99% CI of tstats","\n")
ci99_boot_t_stats
